I recently re-wrote some of my SocketServer unit tests. I implemented a test case to send/receive data and I noticed
some race condition began to appear more and more frequently. I need to go back thru my commit history and find out
why it began appearing more frequently. Oh right, now that I think about it had to do with when/how I stopped the
server. At first, I would stop the server mid-test. Didn't make much sense actually, since the server typically
keeps running in the background. Once I moved the .stop() call to tearDown(), the bug was introduced. Anyway,
I had to change the implementation of getConnections() to not be as blocking as it was before. I expect I may need to
again, but I'll review this another day.

Anyway, the implementation of the SocketServer works for now, I started re-writing the acceptance tests. I wanted to
implement some networking in there. I created the foundation for some RestClient, which is just making use of the
low-level socket client I wrote earlier. I want to stay as native to Java as possible here, so no need for downloading
the requests library quite yet; not until I need it. Ok, that's it for now. The whole race condition paradox really
took a lot of my energy out of my day.

Next up, REST requests! I'm going to create a bare-bones implementation that takes advantage of the low-level socket
client I made for unit tests. Hopefully that works. Once that's done, to the webpage we go! Maybe I need to draft that
sometime soon. But I'm not too worried for now. I can make some really simple HTML page to start, and then make it
into a dynamic single-page webpage.